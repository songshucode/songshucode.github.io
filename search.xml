<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[win10-ftp]]></title>
    <url>%2F2019%2F06%2F21%2Fwin10-ftp%2F</url>
    <content type="text"><![CDATA[configure the ftp evrironment on the win10 cumpyter. add ftp servicecontrol panel &gt; program &gt; start and close the windows projectInternet Information Services &gt; FTP services &gt; FTP extensibility &gt; IIS Management Console create ftp serverstart IIS Manager &gt; add ftp site| name | message || ——————— | ————————— || ftp-site-name | name || physical-paht | file-paht || ip-address | ip || SSL | without-ssl || authentication | anonymity-or-basic || authorization | any-user || authorization | read-or-write | configure firewallControl panel &gt; systems and security &gt; windows defender &gt; allow apps or function to pass through windows defenderallow ftp server pass through private and public networksallow another apps &gt; C:\Windows\System32\svchost.exeNow, you can transfer files over the network.]]></content>
      <tags>
        <tag>win10</tag>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pycharm-remote]]></title>
    <url>%2F2019%2F06%2F19%2Fpycharm-remote%2F</url>
    <content type="text"><![CDATA[build pycharm remote debugging function set python remote interpreterHow to use remote interpreter.File &gt; Settings &gt; Project: xxx &gt; Project Interpreter &gt; Add Remote &gt; SSH CredentialsSSH Credentials| options | content || ———————————- | ——————————————— || Host | ip || Port | port || User-name | user_name || Password | xxx || Python-interpreter-path | remote-python-interpreter-path |Path mappingsLocal Path &lt;—&gt; Remote Path set deployment for the synchronization of local and remote filesTools &gt; Deployment &gt; Configuration &gt; +Connection| options | content || ———————— | ———————— || name | deployment_name || Type | SFTP || SFTP-host | ip || Port | port || Root-Path | remote-root-path || User-name | user_name || Password | xxx || Advanced-options | UTF-8 |Mappings| options | content || ————————————- | ——————————— || Local-path | local_path || Deployment-path-on-server | remote-deployment-paht |enable the deployment path on server, you can upload and download files between local and remote filesTools &gt; Deployment &gt; Browse Remote Host set python version running on the terminalFile &gt; Setting &gt; Tools SSH Terminal &gt; Deployment serverYou can choose the python interpreter you need from the tips. And choose UTF-8 as the default encoding.Now, you can find the interpreter ont Tools &gt; Start SSH session. set configurationsconfigure python remote debug you needRun &gt; Edit Configurations &gt; + &gt; Python Remote Debug| options | content || ———————- | ————————————- || Name | name || Local-host-name | ip || Port | port-greater-than-1003 || Path-mappings | Local-path&lt;—&gt;Remote-path |the Path mappings like the set python remote interpreterNow, add the environment variables CUDA need.Run &gt; Edit Configurations &gt; Defaults &gt; python &gt; Environment variables| environment-variables | cotent || ——————————- | —————————————————————————————————————- || CUDA_DEVICE_ORDER | PCI_BUS_ID || LD_LIBRARY_PATH | ”$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64” || CUDA_HOME | /usr/local/cuda || CUDA_VISIBLE_DEVICES | 0,1 || TF_CPP_MIN_LOG_LEVEL | 1 |Maybe, there are some error about cuda, you can use the following command to view the equipment remote python interpreter can use. If you don’t find the GPU on the printed message, you could adjust CUDA_VISIBLE_DEVICES content to find the right equitment.12from tensorflow.python.client import device_libprint(debice_lib.list_local_devices()) Ok, enjoy your new toy!]]></content>
      <tags>
        <tag>python</tag>
        <tag>pycharm</tag>
        <tag>remote</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-data-operation]]></title>
    <url>%2F2019%2F06%2F17%2Fpython-data-operation%2F</url>
    <content type="text"><![CDATA[data file operation for python.[‘txt’, ‘csv’, ‘tfrecord’, ‘tfrecords’, ‘bin’, ‘npy’, ‘npz’]]]></content>
      <tags>
        <tag>python</tag>
        <tag>data file</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim-cmd]]></title>
    <url>%2F2019%2F06%2F08%2Fvim-cmd%2F</url>
    <content type="text"><![CDATA[Viminstall and operation, plugin installnote: I can’t do it on win10. YouCompleteMe plugin can’t be installed installation Download the file for the website install it by the default option. add the file path to the environment path.set the setting file .vimrcyou can find the file on the user folder C:\Users\xxx, and the corresponding plugein file is vimfiles1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859" simple settingset nocompatible " be iMproved, requiredlet $LANG = 'en' " set message languageset langmenu=en " set menu's language of gvim. no spaces beside '='filetype off " requiredset number " show line numberset nowrap " don't auto fold code linesset showmatch " show matching parenthesesset scrolloff=3 " three lines from the top and bottomset encoding=utf-8 " encodingset fenc=utf-8 " encodingset hlsearch " search highlightsyntax on " syntax highlightau BufNewFile,BufRead *.py\ set tabstop=4 " tab width\ set softtabstop=4 \ set shiftwidth=4 \ set textwidth=79 " the line max width\ set expandtab " tab replace the space\ set autoindent " auto indent\ set fileformat=unix " the file format" set code foldset foldmethod=indentset foldlevel=99" shortcut mappingnnoremap &lt;C-J&gt; &lt;C-W&gt;&lt;C-J&gt;nnoremap &lt;C-K&gt; &lt;C-W&gt;&lt;C-K&gt;nnoremap &lt;C-L&gt; &lt;C-W&gt;&lt;C-L&gt;nnoremap &lt;C-H&gt; &lt;C-W&gt;&lt;C-H&gt;" run python codemap &lt;F5&gt; :call RunPython()&lt;CR&gt;func! RunPython() exec "W" if &amp;filetype == 'python' exec "!python %" endifendfunc" set the runtime path to include Vundle and initializeset rtp+=~/vimfiles/bundle/Vundle.vim/" let Vundle manage Vundle, requiredcall vundle#rc()Bundle 'gmarik/vundle'" place the plugin in here.filetype plugin indent on " required" Brief help" :PluginList - lists configured plugins" :PluginInstall - installs plugins; append `!` to update or just :PluginUpdate" :PluginSearch foo - searches for foo; append `!` to refresh local cache" :PluginClean - confirms removal of unused plugins; append `!` to auto-approve removal"" see :h vundle for more details or wiki for FAQ" Put your non-Plugin stuff after this line install Pluginc## Vundle download the plugin 1git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim add the following setting code to the .vimrc 12345" set the runtime path to include Vundle and initializeset rtp+=~/vimfiles/bundle/Vundle.vim/" let Vundle manage Vundle, requiredcall vundle#rc()Bundle 'gmarik/vundle' using 1Bundle 'plugin name' command 1234:BundleList - lists configured plugins:BundleInstall - installs plugins; append `!` to update or just :BundleUpdate:BundleSearch foo - searches for foo; append `!` to refresh local cache:BundleClean - confirms removal of unused plugins; append `!` to auto-approve removal YouCompleteMe support language 1C、Objectiv-c、C#、C++、Objectiv-C++、Php、Javascript、Typescript、python、Go、Rust install 1Bundle 'Valloric/YouCompleteMe' compile the plugin 12cd ~/.vim/bundle/YouCompleteMe./install.py --clang-completer TaglistIt is a plugin to jump between code download the ctags unzip the ctags file to get ctags.exe copy ctags.exe to the vim.exe installation file add the following code to the .vimrc 12set tags=tags;set autochdir install Taglistadd the following code to .vimrc 123456Bundle &apos;taglist.vim&apos;let Tlist_Ctags_Cmd=&apos;ctags&apos;let Tlist_Show_One_File=1let Tlist_WinWidt =28let Tlist_Exit_OnlyWindow=1let Tlist_Use_Left_Windo =1 NERDTreeadd the following code to .vimrc12345Bundle 'scrooloose/nerdtree'let NERDTreeWinPos='left'let NERDTreeWinSize=30let NERDTreeShowHidden=0map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt; and this to the top of .vimrc to ignore some error12345set encoding=utf-8 " encodingset fenc=utf-8 " encodingset termencoding=utf-8set fileencoding=chineseset fileencodings=ucs-bom,utf-8,chinese Error meeting in the installation process Please input Enter or other key to continueThis is beause there is some thing wrong in the setting file .vimrc. fix it, and there will be fine.]]></content>
      <tags>
        <tag>install</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lua-cmd]]></title>
    <url>%2F2019%2F06%2F08%2Flua-cmd%2F</url>
    <content type="text"><![CDATA[Luainstall installation Download the binary file lua-5.3.5_Win64_bin.zip form the offical website Upzip *.zip to get the following file and adjust the file name to the right one 1234lua53.exe --&gt; lua.exeluac53.exe --&gt; luac.exewlua53.exe --&gt; wlua.exelua53.dll Add the file path to the environment path.]]></content>
      <tags>
        <tag>Lua</tag>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode-Plugin]]></title>
    <url>%2F2019%2F06%2F05%2FVSCode-Plugin%2F</url>
    <content type="text"><![CDATA[describe the VSCode Plugin, install, settingnote: It’s working. fundamental concepttask: running a script once.task.json: setting file about task.working space: the working folder.setting.json: setting file of the working space. you can find a button on the bottom right corner, and click it you will find the setting button.launch.json: setting file of debug environment. MarkdownMarkdown All in OneSome shrotcuts for markdown editing Markdown Preview Github StylingChange VSCode’s built-in markdown preview to match Github’s style Markdown ShrotcutsSome shortcuts for markdown editing pythonPythonpython official pluginsetting.json12"python.pythonPath": "E:/Anaconda3/envs/tf-gpu/python","python.linting.pylintPath": "E:/Anaconda3/envs/tf-gpu/Scripts", the first one is thepython.exe‘s path.the second one is thepylint.exe‘s path. It’s a code analysis tool, and you can install it by the following command:1pip install pylint tasks.jsonrun python file shortcut:Ctrl+Shift+Bset the default template to create tasks.json12command # the script to runargs # the paraments set for running. using this "$&#123;file&#125;" lunch.jsonclick the debuf icon on the left bar, and find the setting button on the top bar.now, it’s time for you to debug you code. Visual Studio IntelliCodeCode completion automaticallysetting.jsonadd the following command to the setting file.``` bash“python.autoComplete.extraPaths”: [ “E:/Anaconda3/envs/tf-gpu”, “E:/Anaconda3/envs/tf-gpu/Lib”, “E:/Anaconda3/envs/tf-gpu/Lib/site-packages”, “E:/Anaconda3/envs/tf-gpu/DLLs”]]]></content>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[anaconda-cmd]]></title>
    <url>%2F2019%2F06%2F05%2Fanaconda-cmd%2F</url>
    <content type="text"><![CDATA[inistall anaconda on the win10, set environment variables, and some operation command. inistall download the latest installation file from anaconda official website select the default installing optionset the environment variablesadd the system environment path $PATHwith the following anaconda installing path:123Anaconda3Anaconda3/ScriptsAnasonda3/Library/bin operation commandcreat new working environment1conda create -n environment_name [python=x.x] you can select the python version, and the default version is the one in conda activate the working environment1activate environment_name deactivate the wroking environment1deactivate environment_name remove the wroking environment1conda remove -n environmtne_name --all view currently available working environment12conda info --envconda info -e change the pip source to speed up download make flolder named pip on the C:\Users\xx\ add the setting file pip.ini to this flolder C:\Users\xx\pip\pip.ini12[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple uninstall Anacondafind the Uninstall-Anaconda.exe on the installing path, and running it. clone the existing environment1conda create -n new_e --clone old_e]]></content>
      <tags>
        <tag>anaconda</tag>
        <tag>inistall</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win10-cuda-cudnn-tensorflow]]></title>
    <url>%2F2019%2F06%2F04%2Fwin10-cuda-cudnn-tensorflow%2F</url>
    <content type="text"><![CDATA[install cuda10.1,cudnn7.6,tensorflow1.13.1note: It’s working. install CUDA download the cuda filecuda_10.1.168_425.25_win10.exe from the CUDA official website select the default installing option set the environment variables123456789101112131415161718 # new system environment variables CUDA_SDK_PATH = C:\ProgramData\NVIDIA Corporation\CUDA Samples\v8.0 CUDA_LIB_PATH = %CUDA_PATH%\lib\x64 CUDA_BIN_PATH = %CUDA_PATH%\bin CUDA_SDK_BIN_PATH = %CUDA_SDK_PATH%\bin\win64 CUDA_SDK_LIB_PATH = %CUDA_SDK_PATH%\common\lib\x64 # add to system variable PATH %CUDA_LIB_PATH%;%CUDA_BIN_PATH%;%CUDA_SDK_LIB_PATH%;%CUDA_SDK_BIN_PATH%; C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\lib\x64； C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0\bin； C:\ProgramData\NVIDIA Corporation\CUDA Samples\v8.0\common\lib\x64； C:\ProgramData\NVIDIA Corporation\CUDA Samples\v8.0\bin\win64；4. check whether the CUDA works properly by the following command ``` bash nvcc -V cd NVIDIA GPU Computing Toolkit\CUDA\v10.1\extras\demo_suite deviceQuery.exe bandwidthTest.exe install cudnn downloading the cudnn filecudnn-10.1-windows10-x64-v7.6.0.64.zipfrom the CUDA official website copy the cudnn files to the corresponding CUDA folder.install Anaconda downloading the Anaconda installation file for the Anacoada official website set the environment variables create python3.7 working environment 1conda create -n environment_name python=3.7 download the tensorflow-gpu install file tensorflow_gpu-1.13.1-cp37-cp37m-win_amd64.whl install this file under the working environment 1234567 pip install xxx.whl6. check whether it works properly ``` python import tensorflow as tf sess = tf.Session() a = tf.constant([1, 2, 3]) print(sess.run(a)) ok, enjoy it.]]></content>
      <tags>
        <tag>tensorflow</tag>
        <tag>win10</tag>
        <tag>cuda</tag>
        <tag>cudnn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux-cmd]]></title>
    <url>%2F2019%2F06%2F02%2Flinux-cmd%2F</url>
    <content type="text"><![CDATA[linux 中的常用命令: 压缩， 文件压缩压缩文件类型 tools file type zip,unzip *.zip tar .tar.gz,.tar zip 压缩1zip -r myfile.zip ./* 将当前目录下的所有文件压缩到myfile.zip中，其中-r表示递归操作note: 如果myfile.zip存在，则向其中添加文件 解压缩1unzip -o -d /usr/local/ myfile.zip 将myfile.zip中的内容解压到/sur/local/文件夹下-o不提示的情况下覆盖文件-d指明解压缩到的文件夹 多压缩文件的操作1zip -d myfile.zip a.txt 删除压缩文件中的a.txt文件1zip -m myfile.zip b.txt 向myfile.zip中移入文件b.txt，复制+删除 多文件操作1zip -r file.zip f1 f2 /usr/local 将多个文件和文件夹压缩到file.zip中 tar 参数 这5个命令要用且只能用到其中的一个| name | operation || —— | ————————————— || -c | 建立压缩档案 || -x | 解压 || -t | 查看内容 || -r | 向压缩归档文件末尾追加文件 || -u | 更新原压缩包中的文件 |这5个参数可以视情况使用| name | operation || —— | —————————— || -z： | 有gzip属性的 || -j： | 有bz2属性的 || -Z： | 有compress属性的 || -v： | 显示所有过程 || -O： | 将文件解开到标准输出 | 查找find1find path -option [-print] [-exec -ok command] &#123;&#125; \ option参数| option | prediction || —————— | ———————————————— || -amin n | 在过去几分钟被读取过 || -anewer file | 比文件file更晚被读取过 || -atime n | 在过去几天内被读取过 || -cmin n | 在过去几分钟被读取过 || -cnewer file | 比文件file更新被读取过 || -ctime n | 在过去几天内被读取过 || -name name | 文件名称为name的文件 || -iname name | 文件名称为name的文件，区分大小写 || -type c | 文件类型是c的文件 |文件的名字支持模糊查找*.c_文件类型c参数_| option | prediction || ——— | ——————— || d | 目录 || c | 字节型装置文件 || b | 区块装置文件 || f | 一般文件 || l | 符号链接 |可以使用( )将运算式分离12345(exp1 -and exp2)(! exp1)(-not exp1)(exp1 -or exp2)(exp1, exp2) 例子123456find . -name "*.c"find . -type ffind . -ctime -20 # 列出目录下最近20天内更新过的文件find . -type f -mtime +7 -ok rm &#123;&#125;\ # 找到目录下在7天前改变的文件，并在删除前询问它们find . -type f -prem 644 -exec ls -l &#123;&#125; \ # 找到具有读写权限，冰鞋文件所属用户和其他用户具有读写权限的文件find . -name '*.c' -exec grep -l 'open' &#123;&#125;\ # 找到当前目录下c文件中包含‘open'字符串的文件 grep用来全面搜索正则表达式，并把行打印出来1grep [-option] pattern file option message -i ignore-case -w match-word -l match-file-content -m match-file-number 查看CPU信息查看物理cpu个数1cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l 查看每个物理cpu中核的个数1cat /proc/cpuinfo | grep "cpu cores" | uniq 查看逻辑cpu的个数1cat /proc/cpuinfo | grep "processor" | wc -l wc1wc -option [file] 统计指定文件中的字节数、字数、行数。如果没有指定文件名则从标准输入读取。| option | message || ——— | —————— || -c | byte-number || -l | line-number || -m | chart-number | sed1sed [-nefri] 'command' input_text option message -n 使用安静模式 -f+f_name 执行f_name内的sed命令 -i 直接修改读取的档案内容 command message a add c replace some line d delete i insert p print g replace some charts with another s replace with regular expressions example123456789101112sed '1d' f # 删除f中的第一行sed '$d' f # 删除f中的最后一行sed '1,2d' f # 删除f中的第1，2行sed -n '1p' f # 显示f中的第一行sed -n '/ruby/p' f # 查询包括ruby关键字的行sed -n '/\$/p' f # 查询包括$关键字的行sed '1a drink tea' f # 在第一行后增加字符串drink teased '1c songshu' f # 把第一行代替为songshused '1,3c songshu' f # 把第一行到第三行替换为songshused 's/string/sognshu/g' # 在一行中将string替换为songshused -i '/test/s/test/songshu/' f # 将f中的test替换为songshused -i 's/ *//' f # 删除f中行首的空格 uniq1uniq -option [file_name] option message -c count-the-same-line -d only-print-the-repeated-line -f skip-some-words -i ignore-case -s skip-some-charts -u unique -w check-the-first-n-charts sort1sort -option [-o out_file] [-t split chart] [+start-end] [file_name] otion message -b ignore-space-chart-at-start -n positive-order -r reverse-order]]></content>
      <tags>
        <tag>blog</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo Markedown 语法]]></title>
    <url>%2F2019%2F05%2F12%2Fhexo-Markedown-%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Markdown 是一种标记语法，使用简单的文本格式来表达复杂的标记语言。基本的语法介绍。 标题12# 一级标题## 二级标题 快捷键： (提高文字等级，降低文字等级)Ctrl+Shift+[ / ] 常用语法 表达式 描述 快捷键 **txt** 粗体 Ctrl+B _txt_ 斜体 Ctil+I _**txt**_ 加粗斜体 Ctrl+B+I ~~txt~~ 删除线 - 引用块1&gt; txt... 代码块1234`行内代码`` ``多行代码` `` 快捷键：行内 | 多行Ctrl+M+I | Ctrl+M+C 公式块123$$数学公式$$ 快捷键：(Ctrl+M冲突，改为Ctrl+Alt+M)Ctrl+Alt+M更多公式语法 分割线123---+++*** 列表123456有序列表，显示数字1. ...无序列表，显示点* ...+ ...- ... 快捷键：有序列表 | 无序列表Ctrl+M+1 | Ctrl+M+B 表格1234| head1 | head2 || ----- | ----- || txt1 | txt2 || txt3 | txt4 | 快捷键：Ctrl+Alt+T在表头下添加：可以进行左对齐，右对齐，中间对齐 超链接1[连接文字](链接地址) 快捷键：Ctrl+L + url 图片1![图片文字](图片地址 “图片描述”) 使用 hexo-asset-image 插件可以在创建文章时生成一个同名的文件夹用来存储图片快捷键：Ctrl+Shift+L + url 模板设置在/scaffolds/post.md中可以修改新建文章的模板12345---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:---]]></content>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo 命令]]></title>
    <url>%2F2019%2F05%2F10%2Fhexo-cmd%2F</url>
    <content type="text"><![CDATA[hexo 使用的常用命令，初始化，建立新章节，添加新的属性，生成静态文件，发布以及配置数学公式的支持 inistallgit install官网下载git安装包，一路next node.js install官网下载node.js安装包，会默认安装npm hexo install1npm install -g hexo 使用git cmd或者windows cmd安装 setting ssh key for git generate ssh key1ssh-keygen -t rsa -C "email@xxx.com" if reach any error, delete the older ssh key file in the .ssh/ submit public key copy the public key in .ssh/id-rsa.pubto the github web asssociating blog and githubedit the file_config.ymlin the porject directory1234deploy: type: git repository: git@github.com:xxx/xxxe.github.io.git branch: master setting the support of Latex change the Markdown rendering engine 12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save set the config fileadjust the config file node_modules\kramed\lib\rules\inline.js 1234567&gt;&gt; 11 line//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,&gt;&gt; 20 line``` bash//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, open the MathJax on the themeopthe the config file _config.yml under the theme, enable the math equations render supprot 12345678910math: enable: true # Default(true) will load mathjax/katex script on demand # That is it only render those page who has 'mathjax: true' in Front Matter. # If you set it to false, it will load mathjax/katex srcipt EVERY PAGE. per_page: true engine: mathjax #engine: katex open the MathJax on the blog front matterusing the following command on the blog front matter to render the math equations. 123456---title: index.htmldate: 2018-07-05 12:01:30tags:mathjax: true--- add the search function install the module 1npm install hexo-generator-searchdb --save config global config fileadd the following content to the global config file. 12345search: path: search.xml field: post format: html limit: 10000 config theme config fileenable the lodal_search 123456789# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 operationinit1$ hexo init [folder] 新建一个网站，使用folder制定文件夹，默认为当前文件夹。 new1$ hexo new [layout] &lt;title&gt; 新建一篇文章，如果没有设置layout则默认使用_config.yml中的default_layout参数。如果标题中使用空格，需要使用引号括起来 draft1hexo new draft &lt;title&gt; 新建一篇草稿，草稿并不会被更新到服务器端的个人博客中，会在本地文件夹source\_drafts中新建一个md文件 publish1hexo publish [layout] &lt;filename&gt; 公布草稿为博客 page为博客添加新的属性（tag,…）12$ hexo new page tags$ hexo new page categories 会在相应在source文件夹下生成相应的markdown文件，分别在每个文件头处添加：12$ type: "tags"$ type: "categories" generate1$ hexo g 生成静态文件 选项 描述 -d 文件生成后部署到网站上 -w 监视文件变动 server1$ hexo server 启动服务器，本地查看选项 | 描述:—-:|—--P | 重设端口-s | 只是用静态文件-l | 启动日记记录，使用覆盖记录格式—drafts | 查看草稿 deploy1$ hexo d 部署网站到远端服务器参数 | 描述—-|—--g | 部署之前预生成静态文件 clean1$ hexo clean 清除缓存文件和已经生成的静态文件。在某些情况下，尤其是更换主题后，如果发现站点的更换无论如何也不生效，可能需要运行该命令。 list1$ hexo list &lt;type&gt; 列出网站资料 调试模式1$ hexo --debug 在终端显示调试信息并记录到debug.log文件中。 生成并发布1$ hexo d -g Error Error: Spawn failed check the ssh key check the ssr]]></content>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
